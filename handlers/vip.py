from aiogram import F
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram import Router
from aiogram.fsm.context import FSMContext
import models
import keyboards as kb
import steammarket as sm
from data.config import sell_fee

router = Router()


class AddInventory(StatesGroup):
    add_item_state = State()
    delete_item_state = State()


@router.message(F.text == "‚ÅâÔ∏èSUPPORT‚ÅâÔ∏è")
async def support(message: Message):
    models.LogBase.add(message.from_user.id, message.from_user.username, "/support")
    if models.Users.check_vip(message.from_user.id) is True:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ - @ZhuchkaTriplesix")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")


@router.message(F.text == "‚ùìVIP HELP‚ùì")
async def vip_help(message: Message):
    models.LogBase.add(message.from_user.id, message.from_user.username, "/vip_help")
    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è Vip –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n/support - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å —Å –±–æ—Ç–æ–º\n/add_item - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã\n/my_items - –í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã")


# noinspection PyTypeChecker
@router.message(F.text == "üìàMY ITEMSüìà")
async def my_cases(message: Message):
    models.LogBase.add(message.from_user.id, message.from_user.username, "/my_items")
    if models.Users.check_vip(message.from_user.id) is True:
        my_items = models.Items.user_items(message.from_user.id)
        answer = '–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã:\n\n'
        for key in my_items:
            answer = answer + f"{key}: {my_items[key]}\n"
        await message.answer(answer, reply_markup=kb.inventory_kb)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")


# noinspection PyTypeChecker
@router.callback_query(F.data == "items_price")
async def items_price(callback: CallbackQuery):
    models.LogBase.add(callback.from_user.id, callback.from_user.username, "items_price")
    items = models.Items.user_items(callback.from_user.id)
    answer = '–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:\n\n'
    total = 0
    for key in items:
        item_price = sm.get_item(730, key, currency='RUB')
        x = str(item_price['lowest_price'])[:-5]
        x = x.replace(',', '.')
        multi_price = float(x) * items[key]
        total += multi_price
        answer = answer + f"{key}: {items[key]} * {item_price['lowest_price']} = {round(multi_price, 2)} —Ä—É–±.\n"
    answer = answer + f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {round(total, 2)} —Ä—É–±.\n"
    answer = answer + f"\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏: {round(total * sell_fee, 2)} —Ä—É–±."
    await callback.message.answer(answer)


@router.message(F.text == "‚ûïADD ITEM‚ûï")
async def add_item(message: Message, state: FSMContext):
    models.LogBase.add(message.from_user.id, message.from_user.username, "/add_item")
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª –∏ —á–µ—Ä–µ–∑ . –∫–æ–ª-–≤–æ\n–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è:\nClutch Case.100\nFracture Case.10")
    await state.set_state(AddInventory.add_item_state)


@router.message(AddInventory.add_item_state, F.text)
async def add_item_bd(message: Message, state: FSMContext):
    mes = message.text.split(".")
    hash_name = mes[0]
    try:
        item_count = int(mes[1])
        telegram_id = message.from_user.id
        models.Items.add_item(telegram_id, hash_name, item_count)
        await message.answer(f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ {hash_name}")
        await state.clear()
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")
        await state.clear()


@router.message(F.text == "‚ùåDELETE‚ùå")
async def delete_item(message: Message, state: FSMContext):
    models.LogBase.add(message.from_user.id, message.from_user.username, "/delete")
    if models.Users.check_vip(message.from_user.id) is True:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.")
        await state.set_state(AddInventory.delete_item_state)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")


@router.message(AddInventory.delete_item_state, F.text)
async def delete_item_state(message: Message, state: FSMContext):
    models.Items.delete_item(message.from_user.id, message.text)
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ {message.text}")
    await state.clear()
